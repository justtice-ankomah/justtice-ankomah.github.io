
=====================================
ANDROID ANIMATION

To create an animation::
1. create a new 'anim' folder under resource and create an animation file. eg fade.xml
Then declare an animation object and load your animation file to it. 
Animation fadein;
fadein = AnimationUtils.loadAnimation(this,R.anim.fade);

Then start the animation on a particular view. eg button. 
mybtn.startAnimation(fadein);

xml animation types::::

fading in and out
   <alpha  
   android:fromAlpha="0.0"  
   android:toAlpha="1.0" />

MOVEMENT

<translate   
    android:fromXDelta="-100%"  
    android:toXDelta="0%" />

<translate   
    android:fromYDelta="-100%"  
    android:toYDelta="0%" />

SCALE OR STRETCHING

<scale  
   android:fromXScale="1.0"  
   android:fromYScale="0.0"/>

<scale  
   android:fromYScale="1.0"  
   android:fromYScale="0.0"/>

DURATION AND OFFSET
This should be added to the <set> attribute
android:duration="666"
android:startOffset="333"

'DURATION' means, how long the animation should last
'STARTOFFSET' means, how long the animation should delay before it should start

ROTATION

<rotate 
  android:fromDegrees="360"  
  android:toDegrees="0"/>

REPEAT AND REVERSE MODE

android:repeatMode="reverse"
android:repeatCount="10"

"repeatMode" when the animation is rotated, the next time is being rotated, in which revers other do you want to rotate it
"repeatCount" means, How many times do you want to repeat the animation. above is 10*


LISTENNERS TO CHECK WHEN ANIMTION START, REPEAT AND END. 

first implemnts the "Animation.AnimationListener" on your class. Then overide it 3 methods 'onAnimationStart' 'onAnimationEnd' 'onAnimationRepeat'


=====================================
SEEKBAR

1. add "SEEKBAR" widget to your xml file and add a android:max="5000" attribute to it to determine the max number of the seekbar. 
Then create an object of it in your mainActivity.java file.

        seekbarspeed= (TextView) findViewById(R.id.seekbarspeed);
2. Set "setOnSeekBarChangeListener" to the seekbar and Override it 3 methods: onProgressChanged, onStartTrackingTouch, onStopTrackingTouch

        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
               // 'progress' get the current progress number
               // 'seekBar' the seekbar object eg seekBar.getmax();
 
               
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {
              // this method will execute when the user start draging the seekBar.
            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {
                // this method will execute when the user Stop draging the seekBar.
            }
        });

=====================================

To surpport binding,

implements the "OnBind" method and return the instance of the service class:

@overide
public IBinder onBind(Intent intent){
   return binder;
}

puplic class mybinder extend Binder{
 myservice get(){
   return myserservice.this;
 }
}

public IBinder binder = new mybinder();

IBinder, OnBind, Binder

1. create a public inner class that extends Binder, and create a method in it that return the instance of the parent class (Service);

2. create create and Ibinder oject of this inner class;

3. return this Ibinder object in "onbind" method.


Then..
To bind to this service inside your mainactivity:::

declare an object of your service class but don't assign anything to it. the key is to assign the instance of your service class to it in the "onServiceConnected" of the serviceconnection.

Myservice myservice_obj; 

Then setpup a service connection.Inside "onServiceConnected" cast the (IBinder service) to your service innerclass. Then use that object to  assign Myservice class instance to the myservice_obj above;


    ServiceConnection serviceConnection = new ServiceConnection() {
        @Override
        public void onServiceConnected(ComponentName name, IBinder service) {
            Myservice.mybinder mybinder_obj = (Myservice.mybinder) service;
          myservice_obj = mybinder_obj.getService();
          
        }

        @Override
        public void onServiceDisconnected(ComponentName name) {
         

        }
    };

Now you have gotten an objct of your Myservice class that is "myservice_obj" You can now use it to retrive methods in the service

======
1. When an activity asks to bind to a service using a service connection, the connection calls the onBind() method of  the service

2. an activity binds to a service using a ServiceConnection object. A ServiceConnection is an interface with two methods: onServiceConnected() and onServiceDisconnected(). 


3,. The onServiceConnected() method is called when a connection to the service has been established and a Binder object is received from the service

4. onServiceDisconnected() method is used when the connection to the service has been lost


=====================================
GESTURE

1. inside your mainactivity.java implements GestureDetector.onGestureListener and GestureDetector.onDoubleTapListener
and overide all the methods of the 2 implemented gesture interface methods.

2. Then create a GestureDetectorCompat object.
GestureDetectorCompat gdc = new GestureDetectorCompat(this,this);

3. Then set listener for the gestrureDetectorCompat object. 
 gdc.onDoubleTapListener(this);

4. Then perfrom actions in the Gesture overidden methods to listen to clicks and scrolls return true in those methods. 


5. Overide the MainActivity "ontouchEvent" method to tell your activity to listen to all your geture touch event by adding
 gdc.onTouchEvent(event); 











