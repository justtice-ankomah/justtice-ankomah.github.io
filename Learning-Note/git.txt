you can install git and use "git Bash" to run all your commands

git version === to check version


 CONFIGURE GIT

git config --global user.name "justice ankomah"  => to confgire your name

git config --global user.email justiceankomah12@gmail.com   => to confgire your email (don't add double quote like the above name configuration becuase you don't have any space in your email)

git config --global core.editor "code --wait" ==> text editor configuration 

all the above configurations are saved in .gitconfig file. To open it use:
git config --global -e

git config --global core.autocrlf input true   ==> configigure end of lines \n

git --help ==> for help


// GIT FILE LIFE CYCLE

project_directory + Staging Area + Commit 

// to create project use:

mkdir moon == make a directory called moon

cd moon ===> move to current directory

git init ==> initialize the above moon folder as a git repository (It will create a .git file which will be hidden in your project but don't worry does how it works) 
now, git will keep track of files changes in the "moon" folder
If you already have a folder/directory you would like to use for Git: Navigate to it in command line, or open it in your file explorer, right-click and select "Git Bash here"


echo helloo > mytext.txt ==> creat a file mytext.txt and write "helloo" in it

ls ==> to check all the list of files in the project_directory

git status  ==> to track the status of the above file to see if it in the project_directory, staging area or commit area.
You will see "Untracked" - it represend files that are in your Project_directory, but not added to the stagging area

git add mytext.txt ==> to add the above mytext.txt to the staging area
git add --all  ===> add all files in the working directory to the staging area instead of a single file.

git status ==> run it again to see if the file is now in the staging area being ready to be commited

git rm --cached mytext.txt ==> To remove the above added file "mytext.txt" from the staging area

echo "helloo world" >> mytext.txt ===> to append text to mytext.txt with double >>  (remember, when you modify a file, the changes will need to be added to the stagging stage again manualy. see below)

git add mytext.txt ==> run it again to commit the changes to the stagging stage.
git restore mytext.txt ==> run this if you don't want to commit the new changes to the stagging area. (it will commit the previous changes to the staging area)

git commit -m "i just maade a commit" ==> to commit your project from the staging area to the git repository (-m => means add message)
The above will open your default editor with commit changes, enter any commit message in it. Close it when you are done 
Git considers each commit as a "change point" or "save point". It is a point in the project you can go back to if you find a bug, or want to make a change.



SKIPPING THE STAGING AREA===============
If you are sure of what you are doing. You can skip the staging area and commit your code to the git reporitory direct.

// let modify file1.txt and commit it to the repository direct without adding it to the staging area first
echo justice is a programmer >> file1.txt ==> to append a text to file1.txt

// commit the changes to the repository with any message (-am =means, commit all modify files)
git commit -am "I just added some text to file1.txt"


TO REMOVE A FILE FROM WORKING DIRECTORY AND STAGING AREA

git rm file2.txt ==> TO remove file2.txt 

git status ===> To see if the above file is deleted

git ls-files ==> To list all files 


TO RENAME A FILE

git mv file1.txt main.js  ===> ro rename file1.txt to main.js

git status ==> to check the changes

git commit -m "i just renamed file1.txt"  ==> to commit changes (-m = commit only modify files )


GET SHORT STATUS

git status --short ==> will give you a short message of status of each file with below alphabet attached to them.

    ?? - Untracked files
    A - Files added to stage
    M - Modified files
    D - Deleted files


Git Branch ========
BRANCH => In Git, a branch is a new/separate version of the main repository.
Branches allow you to work on different parts of a project without impacting the main branch.
When the work is complete, a branch can be merged with the main project.
You can even switch between branches and work on different projects without them interfering with each other.
Branching in Git is very lightweight and fast!


git branch hello-world ==> to create a new branch with the name "hello-world"
 git branch -d hello-world===> To delete the branch with the name "hello-world"

git branch ===> to see all the branches for this git repository Eg.
 hello-world
* master
          (the * master above specifies that you are currently working on that branch)

git checkout hello-world  ==> to select the branch you want to work on Eg.
* hello-world
  master
Switched to branch 'hello-world'

         (the * is now on the "hello-world" branch)

now, you can add new file to your project directory and commit it to the new branch. 
Then switch between the old and new branch and excute "git ls-files" on them both and you will see that they have different files

Emergency Branch ==========
Imgagine you have just created a new branch called "mynewBranch" and swictched to it. Then you just realize that there is some bug you need to fix in the
"master" branch. 
To solve this, you have to create a new branch "my-emergency-branch" then fix the bug and stage and commit it to "my-emergency-branch". 
Then you need to merg  "my-emergency-branch" to "master" branch to become one. That's all what is meant by Emergency Branch.

so let do it...

git branch my-emergency-branch == create emergency branch

git checkout my-emergency-branch == switch to emergency branch

Then fix the error in your source code that you wanted to have solved in the master branch.

git add --all == put all the files in the staging area

git commit -m "my emergency commit" == commit the changes

Then let do the merging....

git checkout master === switch to master branch

git merge my-emergency-branch == merge "my-emergency-branch" branch and master (now master and "my-emergency-branch" are the same)
 you can now delete "my-emergency-branch" becuase it no more needed


Git GitHub ================

Push Local Repository...

Go to github website and create a repository and copy the link.
Then switch to a branch in your local repository and connect that repository to the github online repository by doing...

git remote add origin https://github.com/justtice-ankomah/cafeproject.git  ==> to connect a local repository to a github online repository.

git remote -v    ==> to check the url of the remote repository that is linked to this local repository and you will see something like:
  origin  https://github.com/justtice-ankomah/justicetutorials.git (fetch)
  origin  https://github.com/justtice-ankomah/justicetutorials.git (push)

git push --set-upstream origin master  ==> Push the current switched local repository branch to your online github "master" branch and connect them together
(so this is how you connect a local branch with a github remote branch)

git fetch ===> check if remote branch linked to my local current repository branch have the same data.
git status ===> to check if they don't have the same data, it will show the difference you you know what to do.
git merge origin/master ==> merge the local branch with the remote "master" branch if the data in it are not the same

git pull origin  ==> to download all the data in the remote branch to the current local branch
 git push origin ====> to push local repository to remote repository

Tip ========
(1) If you first create a github repository with some files in it already like readme.txt. 
when you try to push a local repository to it, you will some errors like: "fatal: refusing to merge unrelated histories"
That's becuase your github repository has something in it that is not in your local repository.
So you first need to pull whatever is in your github repository to your local repository and push again. Use...

 git pull origin master --allow-unrelated-histories   ====> to pull the data to local repo, and fix the unrelated-history error.

 git push origin master ==> then you can push your data to the github repo.

(2) if you make a push or pull and is stuck at "writing object" execute this commmand
git config --global sendpack.sideband false 


Git and Github branch........

 git branch --all  ===> to check the list of branches in your local repo and remote repo ("--all" means all). Example...
 emergency-branch
  hello-world
  justice
* master
  remotes/origin/iniesta
  remotes/origin/justice
  remotes/origin/master

Now, all the branches above that begins with remotes are from our online github repository. 
Even though you don't have some of the remote branches on your local repository... 
if you run this command "git checkout iniesta" it will create a local branch with the name "iniesta" and automatically pull all the data from the online github branch "iniesta" into it.

git push origin hello-world ===> To push a local branch with name "hello-world" to github. this will create the branch "hello-world" and push the data in it on github



Github Page ====
Github pages allows you to host your repository so that you can view it in the browser as a website. 
It simple if you need it simply check w3school for how to use it.


GIThub FORK / COPY =================
Github "fork" is a way of coping someone else repository. So that you can contribute to it or start your own project of that repository. 
For example, you can fork/copy someone else repository and it will show as your respository in your dashboard, so that you can use it.

Example: Click on someone else repository on github to open it. Then on the top-most right corner of the page, you will see "fork" click on it to copy the repository.
Then check the list of your repositories and you will see it in.

 CLONE 
cloning is a waying of copying a full remote gitHub repository to your local drive as repository.
git clone https://github.com/w3schools-test/w3schools-test.github.io.git  ===> to clone/copy this repository to your local drive






TO SEE THE HISTORY OF ALL YOUR COMMIT ===================
git log ===> see all commit history

 GETTING HELP WITH COMMANDS
git commandName -help ==>  will help you to see how to use a specifice command (commandName) Example:
git commit -help ==>  will show you all the commands you can use for the "commit" command



SOME EXPLANATIONS ==============================================================================================================================
Pull => PULL the latest version of the project to a local repository

Push => push local updates to the main project

Clone => copy a project to work on a local repository

BRANCH => In Git, a branch is a new/separate version of the main repository.
Branches allow you to work on different parts of a project without impacting the main branch.
When the work is complete, a branch can be merged with the main project.
You can even switch between branches and work on different projects without them interfering with each other.
Branching in Git is very lightweight and fast!



