===FLOW OF DATA BETWEEN CHILD AND PARENT COMPONENT=====

NOTE===Data flows into your component via property bindings and flows out of your component through event bindings.

===  @INTPUT() DECORATOR =====
The @Input() decorator in a child component or directive signifies that the property can receive its value from its parent component.

So when you assign the @input() deocrator to a property in child component, it actually means, that property will receive it value from the parent component.eg


 //inside child.component.ts "book" property will receive it value from parent component. 
@input() book;


// [book]="parent_component_value" is how the parent assign value to the '@input() book' property in child template. "[book]" is the @input() property in child compoent and "parent_component_value" is the property from the parent compoent.
 
<app-child [book]="parent_component_value"> <app-child>

============
You can use either "Getters and Setters Or ngOnchanges" to do something when the value of an @input() property changes. 
The concept is that, may be you have another function that you would like to execute only when the value of the @input() property changes.

You can use "ngOnChanges" to detect all value changes of @input() properties in a component class in a single method ngOnChanges(){}.
Also you can use  "Getters and Setters" to detect each single @input() property in the component class. 


ngonchanges == Is an interface with a method name ngOnChanges(){};

It tells angular to do something when an "@input()" property value changes in a component class. This "ngOnchange(){}" will be called the number of times base on the @input() properties in your component class to detect "previousValue,  currentValue, firstChange" of all @input() properties values.

"currentValue" == check the current value of the @input property == returns any
"previousValue" == check the previous value that was assign to the @input property returns any
firstChange == check if the current value is equal to the previous value ==returns boolearn

example:: 

ngOnChanges(changes: SimpleChanges) {
  if (changes.myFirst@InputProperty && changes.myFirst@InputPropertyr.currentValue) {
    alert("new value is set");
  }
}

===
with getters and setters, when binding in the template, you bind to the @input() getter or setter function in the component not the private property.
And also the setter will be called whenever the @input() property value changes.
===

============

===  @OUTPUT() DECORATOR =====

@Output() marks a property in a child component as a doorway through which data can travel from the child to the parent.


Creating an object of EventEmitter(), makes that property as an event that can be use as (add)="funtion_to_pass_add_value_to($event)" $event represent the value of the "add" event of below..
 add = new EventEmitter();

//So below means that "add" is an event property that is sending data to it parent component. 

 @Output() add = new EventEmitter()

note== the child component fires an event and the parent component listens to it.

// firing event in child component

// creat an event property that will fire an event
 @Output() add = new EventEmitter();

//when this function is called, event will be fired.

//fire the event.
<button (click)="add.emit("justice")"> </button>

// OR you can create a function in the child component to fire the event like:
 
fire_the_event(){
this.add.emit("justice");
}

//fire the above event in the function.
<button (click)="fire_the_event()"> </button>

// so now, An event is fired in the sky with the name "add" and the value of this event is "justice". which is assigned to an object $event="justice" by angular default.

// The parent component can listen to the event and access the value in the child selector:

<h1 (add)="get_data($event)"> </h1>

//so the value will be passed to the below function in parent component
get_data(value:string){
return value;
}

======================================
Interceptors
======================================
Interceptors are middlewares between The client and server Http communication. Example below.
(client_make_Http_Request_To_server)  ==> (Interceptor) ==> (Server)
 
         And
(client_make_Http_Request)  <== (Interceptor) <== (Server_Returns_Http_response_To_Client)


=======================
Angular project Video Url
======================
https://www.youtube.com/watch?v=hPJMa1A-VNg

==============
js===

The split() method is use to convert a text into an array in the way you want. eg.

// below is saying, convert all white space into an array or simply replace all white space with comma ",". 
var str = "How are you doing today?";
var res = str.split(" ");
// result == How,are,you,doing,today?

or

// below is saying, counting from left, add comma to the first 3 spaces and split it.
var str = "How are you doing today?";
  var res = str.split(" ", 3);
====
The push() method

//The push() method adds new items to the end of an array, and returns the new length.
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.push("Kiwi"); 
//result == ["Banana", "Orange", "Apple", "Mango", "kiwi"];

//To Add element at the beginning of an array use the unshift() method
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.unshift("Lemon","Pineapple");
// result = [Lemon,Pineapple,Banana,Orange,Apple,Mango]

===
The splice() method.

It's used to add/remove item to/from an array. 
it usually takes in 3 paremeters splice(at_what_index, how_many_items_to_remove, items_to_add);

"at_what_index" ==required an integer that specifies what position of index in the array do you want to add item or remove item.
"how_many_items_to_remove" == Optional. an integer that specifies how man items you want to remove from the array.
"items_to_add" == Optional. The new item(s) to be added to the array

//Below is saying: at index position 2 of fruits, remove zero items and add 'lemon' and 'kiwi'
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 0, "Lemon", "Kiwi");
//result = [Banana,Orange,Lemon,Kiwi,Apple,Mango]
=============

===Download css tricks video and master csss=====
https://www.youtube.com/watch?v=wfaDzSL6ll0




 







