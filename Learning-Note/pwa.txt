pwa is a way to make website looks like native apps in a mobile device. it developed with normal web script like html, css, javascript and php

NOTE== Always use chrome when working with pwa. Mozilla works but it doesn't brings all the functionality to help developers to see what is going on. 

Remember = a pwa can be installed on a mobile device just like any android app.

Note= You can not open pwa html or project in the brower direct, no you will get something different. But rather you need to download and install 
"live server" visual studio extenssion. Then inside visual stuido code, right click on the html file to open with "live server"  
that will display the exact page you want


how it works: just create a normal website and link it to a manifest.json file that contains properties of how the app should look on mobile device and 
a service worker. The service worker is responsible for caching data so that when the uer is offline with no internet connection, he can still open the app and
view the cached version of the app. But he can't do aything without intenet connection unless he ON his phone internet.

======
Manfest.json

A JSON file that controls how your app appears to the user and ensures that progressive web apps are discoverable. 
It describes the name of the app, the start URL, icons, and all of the other details necessary to transform the website into an app-like format. 
It represent the properties of your application and how it should be viewed in the phone. 

first create manifest.json file and add belows code to it then link it in the head section of every html page in your project like: 
(you need to remove the below comment becuase comment is not surported in json, i includede it for beter understanding)

{
    "name": "Food Ningja", // the name thats going to show when the app is being previewd as splash screen
    "name_short": "FoodNinga", // Name thats going to show under the incon when the user install the app
    "start_url": "/index.hml", // the page that the app should naviage to when the user tap the app inon on his phone
    "display": "standalone", // (standalone = open the app as a native app without showing it address) OR (browser = show address)
    "background_color": "#FFE9D2", // background color of the app splash screen when the app first load
    "theme_color": "#FFE1C4", // give the app a theme color so that it looks like a native app (mainly appears in the statusbar)
    "orientation": "portrait-primary", // what orientation should the app be opened in? (portrait-primary = vertical)
    // below represent a list of your app icon that should be open on different phone devices
    "icons": [{
            "src": "/img/icons/icon-72x72.png",
            "type": "image/png",
            "sizes": "72x72"
        },
        {
            "src": "/img/icons/icon-96x96.png",
            "type": "image/png",
            "sizes": "96x96"
        },
        {
            "src": "/img/icons/icon-128x128.png",
            "type": "image/png",
            "sizes": "128x128"
        },
        {
            "src": "/img/icons/icon-144x144.png",
            "type": "image/png",
            "sizes": "144x144"
        },
        {
            "src": "/img/icons/icon-152x152.png",
            "type": "image/png",
            "sizes": "152x152"
        },
        {
            "src": "/img/icons/icon-192x192.png",
            "type": "image/png",
            "sizes": "192x192"
        },
        {
            "src": "/img/icons/icon-384x384.png",
            "type": "image/png",
            "sizes": "384x384"
        },
        {
            "src": "/img/icons/icon-512x512.png",
            "type": "image/png",
            "sizes": "512x512"
        }
    ]
}

Then inside the <head> section of all your html pages, link the above manifest file to it with below together ios support.  
<link rel="manifest" href="/manifest.json">
 <!-- ios support -->
 <link rel="apple-touch-icon" href="/img/icons/icon-96x96.png">
 <meta name="apple-mobile-web-app-status-bar" content="#FFE1C4">

Then open the project inside the brower and clik on the inspect element tool.click on "Manifest" to see all the options you have provided in the above manifest.json

Then preview it in android emulator browser with this url:
10.0.2.2:port_number_the_app_is_running_on_in_your_browser:10.0.2.2:5500

OR

Connect your phone to the the lapop with usb with debug mode enabled. Then Open chrome development tool and click on the 3 right dot, 
then click on "more tools" and choose remote devices. 
Then setup "port forwarding" port=5500 ip_address_and_port=localhost:5500 then open your phone browser and navigate to localhost:5500 (use this is easy)

when it open, click on the the 3 dot on the broswer emulator and click on "add to home screen" to add it to home screen. OR 
(use service worker to show a popup that the user will click it on to add it to the home screen)
====================================

SERVICE WORKER

service worker is a javascript file that runs in a seperate thread or background. They can't interact directly with the dom element becuase it doesn't
run on the main thread. Their job is to listen to various event and react to it, it also responsible for pushing notification example like notifying the
user about new UI changes. It for caching pwa so that it the user can interract with it in offline mode by using the "caches" API. 

So create a seperate file in your project root directory and name it sw.js to represent your service worker (you can name it anything)
Then create another app.js (you can call it anything) and register your above sw.js service worker in it. This is becuase you can not register service worker in 
the same file your service worker is in. 

// Inside app.js
// register the sw.js service worker

//first check if broswer suport service worker ("navigator" represent the browser)
if ('serviceWorker' in navigator) {
    // if yes, register the service worker by passing in your service work file name (it uses asynchronours js "promise")
    navigator.serviceWorker.register('/sw.js')
        .then(reg => console.log('service worker registered', reg)) // if successful, execute this on the console
        .catch(err => console.log('service worker not registered', err)); // if not successful execute this on the console

// then() ==> will be called whenever ansynchronous is successful
// .catch() ==>will be called whenever ansynchronous operation fail
}

// Then you need to link the above app.js file which registers the service worker in all your html pages (mainly before the </body> tag).
 <script src="/js/app.js"></script>  

Then on chrome development, "Application" tab, you can see your service worker and the manifest and interact with it.

Also  Then on chrome development, "lighthouse" tab, select mobile and progressive web app and generate an audit to see what pwa need to fullfil before it can be 
considered as a pwa. (make sure you fulfill all as you move on with development) 
 
============

cache.keys() ===represent the name of cached files the chached urls are in




========
Learn everything about progressive web app (pwa) here =https://developers.google.com/web
