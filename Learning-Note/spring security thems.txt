SPRING-SECURITY 5 IMPORTANT TERMS 

Authentication => Verifying users credentials to check if is equal to what is stored in db

Authorization ==> Giving authority or allowing users to access some data or url on the server.

Granted authority => It means the user has been authorized to access some url. meaning he has been granted the authority to do whatever he want with the url. 
It basically the type of role a specific user have either, "user", "admin" or whatever. 
if he has the role of user, the server will only grant him authority to access the users url and not the admin url.  

Role ==> Is a single or group of authorities assigned to a user. 
example admin may have both role of "user" and "admin" But a regular user will only have a role of "user"

Principle ==> It refers to the currently logged in user. 
When the server finnally authenticate users details and find out that everything is correct, it extablish a principal that is uses to remember the uer operation.
That is why you only need to be authenticated once, becuase the server will uses the principal to remembers you in all the urls you access after authentication.

==========

Filters = filters are middleware which sit in-front of all your application urls to allow the user to access the url or redirect him to different url. 
Eg. when you first add spring-security to your project and navigate to the home page, 
the filters which is sitting infront of your application will redirect you to the login page to login before it will authorize you to access the home-page url. 

AuthenticationManager is what does authenticate, it has a method in it class called authenticate which either throw exception when authentication isn't successful. 
You don't have to work with authenticationManager directly, What you work is authenticationManagerBuilder. 
To hava access to it just override the "configure(AuthenticationManagerBuilder auth)" methode of WebSecurityconfigurerAdapter class. 
You can actually see that, the method hah "AuthenticationManagerBuilder auth" the auth object is a reference object for AuthenticationMangerBuilder class. 
And all you need is to use that object to configure your authentication. 
You should also click on the AuthenticationManagerBuilder class to see the types of methods in it.

jwt steps:
1) create authenticate API END-POINT that accept userName and password and returns JWT.

2)Intercept all incoming request...
Extract jwt token from the header.
Validate and set in execution context

Spring Security uses the UserDetailsService interface, which contains the loadUserByUsername(String username) method to look up UserDetails for a given username. 
The UserDetails interface represents an authenticated user object and Spring Security provides an out-of-the-box implementation 
of org.springframework.security.core.userdetails.User

Learn:

AuthenticationManager

UsernamePasswordAuthenticationToken
AuthenticationManager
SecurityContextHolder